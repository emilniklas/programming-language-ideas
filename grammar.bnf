// Tokens

EOF ::= '$'
EOL ::= '\r?\n'
WHITESPACE ::= '\s+'
IDENTIFIER ::= '[a-zA-Z$_][a-zA-Z$_0-9]*'

ARROW ::= '->'
COMMA ::= ','
PERIOD ::= '.'
COLON ::= ':'
SEMICOLON ::= ';'
OPEN_ANGLE ::= '<'
CLOSE_ANGLE ::= '>'
OPEN_CURLY ::= '{'
CLOSE_CURLY ::= '}'
OPEN_PAREN ::= '('
CLOSE_PAREN ::= ')'
QUESTION_MARK ::= '?'
SIMPLE_STRING ::= '".*?"'

IMPORT_KEYWORD ::= 'import'
EXPORT_KEYWORD ::= 'export'
FROM_KEYWORD ::= 'from'
WITHOUT_KEYWORD ::= 'without'
AS_KEYWORD ::= 'as'
ABSTRACT_KEYWORD ::= 'abstract'
CLASS_KEYWORD ::= 'class'
EXTENDS_KEYWORD ::= 'extends'
IMPLEMENTS_KEYWORD ::= 'implements'
SYNC_KEYWORD ::= 'sync'
SYNC_STAR_KEYWORD ::= 'sync*'
ASYNC_KEYWORD ::= 'async'
ASYNC_STAR_KEYWORD ::= 'async*'
MUTATION_KEYWORD ::= 'mutation'
LET_KEYWORD ::= 'let'
VAR_KEYWORD ::= 'var'
TYPEALIAS_KEYWORD ::= 'typealias'
INIT_KEYWORD ::= 'init'
THIS_KEYWORD ::= 'this'

NULL_LITERAL ::= 'null'

ASSIGNMENT_OPERATOR ::= '='
MULTIPLICATION_OPERATOR ::= '*'
ADD_OPERATOR ::= '+'


// AST

script ::=
  topLevelDeclaration*

topLevelDeclaration ::=
  importDirective |
  exportDirective |
  classDeclaration |
  immutableValueDeclaration |
  functionDeclaration |
  typealiasDeclaration

endOfStatement ::=
  EOL | SEMICOLON | EOF

importDirective ::=
  IMPORT_KEYWORD
  WITHOUT_KEYWORD?
  (simpleIdentifierList FROM_KEYWORD)?
  SIMPLE_STRING
  (AS_KEYWORD simpleIdentifier)?
  endOfStatement

exportDirective ::=
  EXPORT_KEYWORD
  (
    classDeclaration
  |
    functionDeclaration
  |
    immutableValueDeclaration
  |
    (simpleIdentifierList FROM_KEYWORD)?
    SIMPLE_STRING
  |
    simpleIdentifierList
  )
  endOfStatement

simpleIdentifierList ::=
  simpleIdentifier
  (COMMA simpleIdentifier)*

simpleIdentifier ::=
  IDENTIFIER

namespacedIdentifier ::=
  simpleIdentifier
  (PERIOD simpleIdentifier)?

namespacedIdentifierList ::=
  namespacedIdentifier
  (COMMA namespacedIdentifier)*

classDeclaration ::=
  ABSTRACT_KEYWORD?
  CLASS_KEYWORD
  genericIdentifier
  (EXTENDS_KEYWORD namespacedIdentifierList)?
  (IMPLEMENTS_KEYWORD namespacedIdentifierList)?
  classBody?

classBody ::=
  OPEN_CURLY
  classLevelDeclaration*
  CLOSE_CURLY

classLevelDeclaration ::=
  functionDeclaration |
  mutationDeclaration |
  immutableValueDeclaration |
  initializerDeclaration

functionDeclaration ::=
  functionSignature
  functionBody

functionSignature ::=
  genericIdentifier
  argumentList
  functionModifier?
  returnType?

argumentList ::=
  OPEN_PAREN
  (
    (normalParameterList COMMA namedParameterList) |
    (normalParameterList) |
    (namedParameterList)
  )?
  CLOSE_PAREN

normalParameterList ::=
  nameAndType
  (COMMA nameAndType)*

namedParameterList ::=
  OPEN_CURLY
  normalParameterList
  CLOSE_CURLY

nameAndType ::=
  simpleIdentifier
  (COLON typeExpression)?

typeExpression ::=
  typeName |
  signatureExpression

typeName ::=
  simpleIdentifier
  (OPEN_ANGLE typeExpressionList CLOSE_ANGLE)?
  QUESTION_MARK?

typeExpressionList ::=
  typeExpression
  (COMMA typeExpression)*

signatureExpression ::=
  (typeName | argumentListSignatureExpression)
  returnType

argumentListSignatureExpression ::=
  OPEN_PAREN
  typeExpressionList
  CLOSE_PAREN

functionModifier ::=
  SYNC_KEYWORD |
  SYNC_STAR_KEYWORD |
  ASYNC_KEYWORD |
  ASYNC_STAR_KEYWORD

returnType ::=
  ARROW
  typeExpression

mutationDeclaration ::=
  MUTATION_KEYWORD
  genericIdentifier
  argumentList
  functionModifier?
  functionBody

functionBody ::=
  OPEN_CURLY
  blockLevelDeclaration*
  CLOSE_CURLY

immutableValueDeclaration ::=
  LET_KEYWORD
  valueDeclaration

mutableValueDeclaration ::=
  VAR_KEYWORD
  valueDeclaration

valueDeclaration ::=
  nameAndType
  (ASSIGNMENT_OPERATOR expression)?
  endOfStatement

typealiasDeclaration ::=
  TYPEALIAS_KEYWORD
  genericIdentifier
  COLON
  typeExpression
  endOfStatement

initializerDeclaration ::=
  INIT_KEYWORD
  initializerParameterList
  functionBody?

initializerParameterList ::=
  OPEN_PAREN
  (
    (normalInitializerParameterList COMMA namedInitializerParameterList) |
    (normalInitializerParameterList) |
    (namedInitializerParameterList)
  )?
  CLOSE_PAREN

normalInitializerParameterList ::=
  (
    THIS_KEYWORD PERIOD simpleIdentifier
  |
    nameAndType
    (COMMA nameAndType)*
  )

namedInitializerParameterList ::=
  OPEN_CURLY
  normalInitializerParameterList
  CLOSE_CURLY

genericIdentifier ::=
  simpleIdentifier
  (
    OPEN_ANGLE
    simpleIdentifierList
    CLOSE_ANGLE
  )?

blockLevelDeclaration ::= // TODO

expression ::=
  (
    operation
  |
    functionCall
  |
    literal
  |
    simpleIdentifier
  )

operation ::=
  expression
  operator
  expression

operator ::=
  ADD_OPERATOR |
  MULTIPLICATION_OPERATOR
  // TODO

functionCall ::=
  simpleIdentifier
  OPEN_PAREN
  (
    normalArgumentList
    (COMMA namedArgumentList)?
  |
    namedArgumentList
  )
  CLOSE_PAREN

normalArgumentList ::=
  expression?
  (COMMA expression)*

namedArgumentList ::=
  nameAndExpression?
  (COMMA nameAndExpression)*

nameAndExpression ::=
  simpleIdentifier
  COLON
  expression